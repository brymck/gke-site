description = 'Count Service'

buildscript {
    ext.kotlin_version = '1.3.11'

    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath files('gradle/gradle-trust-all.jar')
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.7'
    }
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'com.google.protobuf'

repositories {
    mavenCentral()
    mavenLocal()
}

group = "countservice"
version = "0.0.1-SNAPSHOT"

def opencensusVersion = "0.17.0" // LATEST_OPENCENSUS_RELEASE_VERSION
def grpcVersion = "1.15.0" // CURRENT_GRPC_VERSION
def jacksonVersion = "2.9.6"

tasks.withType(JavaCompile) {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

ext {
    speed = project.hasProperty('speed') ? project.getProperty('speed') : false
    offlineCompile = new File("$buildDir/output/lib")
}

dependencies {
    if (speed) {
        compile fileTree(dir: offlineCompile, include: '*.jar')
    } else {
        compile "com.google.api.grpc:proto-google-common-protos:1.11.0",
                "io.opencensus:opencensus-exporter-trace-jaeger:${opencensusVersion}",
                "io.opencensus:opencensus-exporter-stats-stackdriver:${opencensusVersion}",
                "io.opencensus:opencensus-exporter-trace-stackdriver:${opencensusVersion}",
                "io.opencensus:opencensus-exporter-trace-logging:${opencensusVersion}",
                "io.grpc:grpc-protobuf:${grpcVersion}",
                "io.grpc:grpc-stub:${grpcVersion}",
                "io.grpc:grpc-netty:${grpcVersion}",
                "io.grpc:grpc-services:${grpcVersion}",
                "org.apache.logging.log4j:log4j-core:2.11.1"

        runtime "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}",
                "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
                "io.opencensus:opencensus-contrib-log-correlation-log4j2:${opencensusVersion}",
                "io.opencensus:opencensus-impl:${opencensusVersion}",
                "io.netty:netty-tcnative-boringssl-static:2.0.8.Final"
    }
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.5.1-1'
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
        ofSourceSet('main')
    }
}

apply plugin: 'kotlin'

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
}

// Provide convenience executables for trying out the examples.
apply plugin: 'application'

startScripts.enabled = false

// This to cache dependencies during Docker image building. First build will take time.
// Subsequent build will be incremental.
task downloadRepos(type: Copy) {
    from configurations.compile
    into offlineCompile
    from configurations.runtime
    into offlineCompile
}

task countService(type: CreateStartScripts) {
    mainClassName = 'com.brymck.CountService'
    applicationName = 'CountService'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
    defaultJvmOpts =
            ["-Dlog4j2.contextDataInjector=io.opencensus.contrib.logcorrelation.log4j2.OpenCensusTraceContextDataInjector"]
}

applicationDistribution.into('bin') {
    from(countService)
    fileMode = 0755
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

task setHttpProxyFromEnv {
    def keyToSchemeMap = ['HTTP_PROXY': 'http', 'HTTPS_PROXY': 'https']
    def env = System.getenv()
    keyToSchemeMap.each { key, scheme ->
        if (key in env) {
            def url = env[key].toURL()
            System.setProperty("${scheme}.proxyHost", url.host.toString())
            System.setProperty("${scheme}.proxyPort", url.port.toString())
            if (url.userInfo) {
                def (user, password) = url.userInfo.split(':')
                System.setProperty("${scheme}.proxyUser", user.toString())
                if (password) {
                    System.setProperty("${scheme}.proxyPort", password.toString())
                }
            }
        }

    }
}

build.dependsOn setHttpProxyFromEnv
